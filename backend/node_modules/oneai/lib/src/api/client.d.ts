/// <reference types="node" />
declare type ISO639 = 'en' | 'es' | 'fr' | 'de' | 'it' | 'pt' | 'ja' | 'ko' | 'zh' | 'ar' | 'ru' | 'tr' | 'nl' | 'pl' | 'sv' | 'da' | 'fi' | 'no' | 'cs' | 'el' | 'hu' | 'ro' | 'sk' | 'sl' | 'bg' | 'et' | 'lv' | 'lt' | 'he' | string;
export interface MultilingualParams {
    enabled: boolean;
    allowed_input_languages?: (ISO639 | 'ALL')[];
    translate_output_to?: ISO639;
    expected_langauges?: ISO639[];
    override_language_detection?: boolean;
}
export interface ApiClientParams {
    apiKey: string;
    baseURL: string;
    timeout: number;
    multilingual: boolean | MultilingualParams;
}
export declare type ApiReqParams = Partial<ApiClientParams>;
export interface HttpResponse {
    status: number;
    data: any;
    headers?: Record<string, string>;
}
export interface HttpApiClient {
    params: ApiClientParams;
    get(path: string, params?: ApiReqParams): Promise<HttpResponse>;
    post(path: string, data: string | Buffer, params?: ApiReqParams): Promise<HttpResponse>;
}
export declare class ApiClientAxios implements HttpApiClient {
    private static readonly uuid;
    private agent;
    params: ApiClientParams;
    constructor(params: ApiClientParams);
    get(path: string, params?: ApiReqParams): Promise<HttpResponse>;
    post(path: string, data: string | Buffer, params?: ApiReqParams): Promise<HttpResponse>;
    validateApiKey(params?: ApiReqParams): string;
}
export {};
